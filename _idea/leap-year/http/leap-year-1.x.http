### 1.0.0 testcase with true leap year

GET http://localhost:8000/api/leap-year?year=2024

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        client.assert(
            response.contentType.mimeType === "application/json",
            "Expected 'application/json' but received '" + response.contentType.mimeType + "'");
    });

    client.test("Response body is correct", function () {
        const body = JSON.stringify(response.body);
        const expect = JSON.stringify({
            "year": 2024,
            "isLeapYear": true
        });
        client.assert(
            body === expect,
            "received wrong body'" + body + "'"
        );
    });
%}

### 1.0.0 testcase with false leap year

GET http://localhost:8000/api/leap-year?year=2025

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        client.assert(
            response.contentType.mimeType === "application/json",
            "Expected 'application/json' but received '" + response.contentType.mimeType + "'");
    });

    client.test("Response body is correct", function () {
        const body = JSON.stringify(response.body);
        const expect = JSON.stringify({
            "year": 2025,
            "isLeapYear": false
        });
        client.assert(
            body === expect,
            "received wrong body'" + body + "'"
        );
    });
%}

### 1.0.0 testcase with invalid year

GET http://localhost:8000/api/leap-year?year=a

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 422, "Response status is not 422");
    });

    client.test("Response content-type is json", function () {
        client.assert(
            response.contentType.mimeType === "application/json",
            "Expected 'application/json' but received '" + response.contentType.mimeType + "'");
    });

    client.test("Response body is correct", function () {
        const body = JSON.stringify(response.body);
        const expect = JSON.stringify({
            "error": "Missing or invalid 'year' parameter."
        });
        client.assert(
            body === expect,
            "received wrong body'" + body + "'"
        );
    });
%}
